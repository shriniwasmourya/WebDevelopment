// var age = 18;
// var age = 19;


// let age1 = 17;
// let age1 = 16;   //Error


// console.log(age)

// if(age>18){
//     console.log("You can drive")
// }else if(age >18 || age <17){
//     console.log("You can wait 1 year for driving")
// }else{
//     console.log("You can't drive")
// }


//For loop

for(let i=0 ; i<10 ; i++){
    // console.log(i);
}


//While loop
let start = 10;

// while(start >= 1){
//     console.log(start);
//     start--;
// }


//do while .. freq not used 
do{
    // console.log("Hello");
    start--;
}while(start>1)


//Functions

function foo(){
    console.log("Function statement :: normal final is called final statement")

}

// function foo(age){
//     console.log(age)
// }

// foo();
// foo(77);    //overloading not supported like c++ or java

let age = function(age){
    console.log(age);
    return 19;
}

console.log(typeof(age))
age(33);


let age2 = ()=>{
    console.log("Hello everyone");
}

age2();
let age3 = (age) => 44;

console.log(age3());

//Arrays

const arr = [2,3,4,4,5,6,6,7,4];
console.log

//this keyword in arrow function  -> lexical scope (parent)

const student = {
    name : "Shriniwas Mourya",
    course : "BCA",
    getName : function(){
        return this.name;
    },

    getCourse : ()=>{
        return this;
    }
}

console.log(student.course)
console.log(student.getCourse())
console.log(student.getName())




// setTimeout(function(){
//     console.log("shriniwas Mourya");
// },2000);

// let i = 1;
// setInterval(()=>{
    
//     console.info(`This is info no ${i}`)
//     i++;
//     console.log(i)
// },1000)





let sq = (num)=> num*num;

let num = 5;
console.log(`Square of ${num} = ${sq(num)}`)


































































































































































































































































































































































































































































































































































































































































































